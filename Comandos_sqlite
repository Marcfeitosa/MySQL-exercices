-- Seleciona todos os registros da tabela Orders

-- Select campos
-- from tabela



Select * from orders

SELECT ORDER_ID
        ,ORDER_STATUS
FROM ORDERS;

-- SELECIONA TODOS OS REGISTROS DA TABELA ORDERS EXIBINDO APENAS AS COLUNAS ORDER_ID, ORDER_STATUS E CUSTOMER_ID

SELECT ORDER_ID
        ,ORDER_STATUS
        ,CUSTOMER_ID
FROM ORDERS;

-- TRABALHANDO COM ALIAS

SELECT DISTINCT ORDER_ID AS 'ID_PEDIDO'
      ,ORDER_STATUS AS 'STATUS_PEDIDOS'
      ,CUSTOMER_ID AS 'ID_DO_CLIENTE'
FROM ORDERS;

-- CONTANDO A QUANTIDADE DE REGISTROS RETORNADOS PELA CONSULTA

SELECT COUNT(*)
FROM ORDERS;

SELECT COUNT(order_id)
FROM ORDERS;


-- DANDO UM APELIDO AO RESULTADO RETORNADO

SELECT COUNT(*) AS 'Quantidade de linhas'
FROM ORDERS;

-- CONTANDO A QUANTIDADEE DE LINHAS NÃO NULAS DA COLUNA CUSTOMER_ID E DANDO UM APELIDO AO RESULTADO RETORNADO

SELECT COUNT (CUSTOMER_ID) AS 'Quantidade de clientes'
FROM ORDERS;

-- TRABALHANDO COM A OPÇÃO WHERE

SELECT * FROM ORDERS
WHERE ORDER_STATUS = 'delivered'


-- CONTATNDO TODOS OS REGISTROS COM O STATUS 'delivered'

SELECT COUNT(*)
FROM ORDERS
WHERE ORDER_STATUS = 'delivered'


-- CONTATNDO TODOS OS REGISTROS COM O STATUS DIFERENTE DE 'delivered'

SELECT COUNT(*)
FROM ORDERS
WHERE ORDER_STATUS != 'delivered'


-- SELECIONA TODAS AS LINHAS DA TABELA ORDERS COM O STATUS DIFERENTE DE 'delivered' E QUE NÃO TENHA PEDIDOS APROVADOS

SELECT * FROM ORDERS
WHERE ORDER_STATUS != 'delivered'
AND ORDER_APPROVED_AT IS NULL


-- SELECIONA TODAS AS LINHAS DA TABELA ORDERS COM O STATUS DIFERENTES DE 'delivered' OU QUE NÃO TENHAM PEDIDOS APROVADOS

SELECT * FROM ORDERS
WHERE ORDER_STATUS != 'delivere'
OR ORDER_APPROVED_AT IS NULL


-- CONSULTA TODOS OS CLIENTES CUJA CIDADE COMEÇA COM MOGI

SELECT * FROM CUSTOMERS
WHERE CUSTOMER_CITY LIKE 'mogi%'


-- CONSULTA TODOS OS CLIENTES CUJA CIDADE NÃO COMEÇA COM MOGI

SELECT * FROM CUSTOMERS
WHERE CUSTOMER_CITY NOT LIKE 'mogi%'


-- CONTA A QUANTIDADE DE LINHAS AGRUPANDO OS RESULTADOS PELO ID DO CLIENTE

SELECT COUNT(*) FROM ORDERS
GROUP BY CUSTOMER_ID


-- SOMA A QUANTIDADE DE VALOR GASTO POR TIPO DE PAGAMENTO

SELECT PAYMENT_TYPE
      ,SUM(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE


-- CALCULA O VALOR MÍNIMO GASTO POR TIPO DE PAGAMENTO

SELECT PAYMENT_TYPE
      ,MIN(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE


-- CALCULA O VALOR MÁXIMO GASTO POR TIPO DE PAGAMENTO

SELECT PAYMENT_TYPE
      ,MAX(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE


-- CALCULA A MÉDIA DE GASTO POR TIPO DE PAGAMENTO

SELECT PAYMENT_TYPE
      ,AVG(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE



-- USANDO A CLAUSULA HAVING

SELECT PAYMENT_TYPE
      ,SUM(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE
HAVING PAYMENT_TYPE IS NOT NULL

SELECT PAYMENT_TYPE
,SUM(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE
HAVING SUM(PAYMENT_VALUE) >100000

-- FILTRANDO O RESULTADO COM A CLÁUSULA WHERE (VAI DAR ERRO POIS O SQL NÃO DEIXA FILTRAR COM WHERE APÓS O GROUP BY)

SELECT PAYMENT_TYPE
      ,SUM(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE
WHERE SUM(PAYMENT_VALUE) > 0

SELECT PAYMENT_TYPE
      ,SUM(PAYMENT_VALUE)
FROM ORDER_PAYMENTS
GROUP BY PAYMENT_TYPE
HAVING SUM(PAYMENT_VALUE) > 0

-- USANDO O CLÁUSULA ORDER BY PARA ORDENAÇÃO POR ORDEM ALFABÉTICA

SELECT CUSTOMER_ID
      ,CUSTOMER_CITY
      ,CUSTOMER_STATE
FROM CUSTOMERS
ORDER BY CUSTOMER_CITY
-- INCLUINDO MAIS UM ORDENAMENTO NO ORDER BY
SELECT CUSTOMER_ID
      ,CUSTOMER_CITY
      ,CUSTOMER_STATE
FROM CUSTOMERS
ORDER BY CUSTOMER_CITY, CUSTOMER_STATE


-- USANDO A CLÁUSULA ORDER BY PARA ORDENAÇÃO POR ORDEM DECRESCENTE

SELECT CUSTOMER_ID
      ,CUSTOMER_CITY
      ,CUSTOMER_STATE
FROM CUSTOMERS
ORDER BY CUSTOMER_CITY DESC

-- COMBINANDO AS CLÁUSULAS GROUP BY E ORDER BY (QUANDO ORDENAMOS, TAMBÉM PODEMOS FAZÊ-LO PELA ORDEM DA COLUNA, COMO NO CASO ABAIXO COM O NÚMERO 2)

SELECT CUSTOMER_STATE
      ,COUNT(*) AS 'Quantidade'
  FROM CUSTOMERS
  GROUP BY CUSTOMER_STATE
  ORDER BY 2 DESC;
  
SELECT CUSTOMER_STATE
      ,COUNT(*) AS 'Quantidade'
      ,CUSTOMER_CITY
  FROM CUSTOMERS
  GROUP BY CUSTOMER_STATE
  ORDER BY 3 DESC;