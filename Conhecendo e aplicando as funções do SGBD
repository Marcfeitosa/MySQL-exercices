-- Conhecendo e aplicando as funções do SGBD

-- USANDO FUNÇÕES ÚTEIS DO SGBD:
-- FUNÇÃO RANDOM()

SELECT RANDOM()

-- FUNÇÃO UPPER

SELECT UPPER(PRODUCT_CATEGORY_NAME) FROM PRODUCTS;

-- FUNÇÃO LOWER

SELECT LOWER(PRODUCT_CATEGORY_NAME) FROM PRODUCTS;

-- FUNÇÃO LENGTH

SELECT LENGTH(PRODUCT_CATEGORY_NAME) FROM PRODUCTS;

-- FUNÇÃO PRAGMA

PRAGMA TABLE_INFO(ORDER_ITEMS);

-- FUNCAO CAST
-- ENTENDENDO A APLICABILIDA DA FUNÇÃO CAST (O CÓDIGO ABAIXO VAI EXEMPLIFICAR UM ERRO POIS A COLUNA PRICE NÃO É INT OU FLOAT)

SELECT PRICE
FROM ORDER_ITEMS
WHERE PRICE > 100

-- CONVERTENDO O VALOR DA COLUNA PRICE PARA NÚMEROS

SELECT CAST(PRICE AS INT) AS PRICE
FROM ORDER_ITEMS
WHERE CAST(PRICE AS INT) > 100


-- SELECIONANDO DADOS DAS TABELAS DE PEDIDOS, PAGAMENTOS E ITENS (limitando às 10 primeiras linhas)

SELECT PEDIDOS.ORDER_ID
      ,PRODUTOS.PRODUCT_ID
      ,PRODUTOS.PRODUCT_CATEGORY_NAME
      ,PRODUTOS.PRODUCT_PHOTOS_QTY
      ,ITENS.PRICE
      ,PAGAMENTOS.PAYMENT_TYPE
      ,PAGAMENTOS.PAYMENT_VALUE
FROM ORDER_ITEMS ITENS INNER JOIN PRODUCTS PRODUTOS
ON ITENS.PRODUCT_ID = PRODUTOS.PRODUCT_ID

INNER JOIN ORDERS PEDIDOS
ON PEDIDOS.ORDER_ID = ITENS.ORDER_ID

INNER JOIN ORDER_PAYMENTS PAGAMENTOS
ON PAGAMENTOS.ORDER_ID = PEDIDOS.ORDER_ID

WHERE CAST(ITENS.PRICE AS INT) > 100.00

LIMIT 100


-- LEFT JOIN
-- SELECIONA OS PEDIDOS SE HOUVER NA TABELA PEDIDOS MAS NÃO NECESSÁRIAMENTE NA TABELA PEDIDOS.

SELECT ORDER_ID
      ,PEDIDO.ORDER_STATUS
      ,CLIENTE.CUSTOMER_ID
      ,CLIENTE.CUSTOMER_CITY
      ,CLIENTE.CUSTOMER_STATE
FROM ORDERS PEDIDO LEFT JOIN CUSTOMERS CLIENTE
ON PEDIDO.CUSTOMER_ID = CLIENTE.CUSTOMER_ID


-- RIGHT JOIN
-- SELECIONA OS PEDIDOS SE HOUVER REGISTROS NA TABELA CLIENTES MAS NÃO NECESSÁRIAMENTE NA TABELA PEDIDOS

SELECT ORDER_ID
      ,PEDIDO.ORDER_STATUS
      ,CLIENTE.CUSTOMER_ID
      ,CLIENTE.CUSTOMER_CITY
      ,CLIENTE.CUSTOMER_STATE
FROM ORDERS PEDIDO RIGHT JOIN CUSTOMERS CLIENTE


-- SUBQUERIES
-- CONSULTA TODOS OS PRODUTOS DA TABELA PRODUTOS ONDE O PREÇO DOS ITENS FOR MAIOR QUE 500.

SELECT * FROM PRODUCTS
    WHERE PRODUCT_ID = ( SELECT PRODUCT_ID
                         FROM ORDER_ITEMS
                         WHERE CAST(PRICE AS INT) > 500 )
                         
-- USANDO O OPERADOR IN

SELECT * FROM PRODUCTS
    WHERE PRODUCT_ID IN ( SELECT PRODUCT_ID
                          FROM ORDER_ITEMS
                          WHERE CAST(PRICE AS INT) > 500 )

-- UM POUCO DE DDL

CREATE TABLE funcionarios(
    ID INT PRIMARY KEY    NOT NULL,
    NOME           TEXT   NOT NULL,
    IDADE          INT    NOT NULL,
    SEXO           CHAR(1),
    SALARIO        REAL
);


-- CONSULTANDO A TABELA PREVIAMENTE CRIADA
SELECT * FROM FUNCIONARIOS

-- RENOMEANDO UMA TABELA
ALTER TABLE FUNCIONARIOS RENAME TO COLABORADORES;

-- ADICIONANDO UMA NOVA COLUNA NA TABELA COLABORADORES

ALTER TABLE COLABORADORES
ADD COLUMN ENDERECO TEXT

-- CONSULTA A TABELA
SELECT * FROM COLABORADORES

-- APAGANDO UMA TABELA CRIADA
DROP TABLE COLABORADORES


-- TRABALHANDO COM INSTRUÇÕES DE DML
-- INSTRUÇÃO INSERT
-- SINTAXE

INSERT INTO TABLE_NAME [(column1, column2, column3, ...columnN)]
VALUES (value1, value2, value3, ...valueN);


-- EXEMPLO DE INSERÇÃO DE LINHAS COM TODAS AS COLUNAS
INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);

-- EXEMPLO DE INSERT NA TABELA FUNCIONARIOS

INSERT INTO FUNCIONARIOS (ID, NOME, IDADE, SEXO, SALARIO)
VALUES (1, 'José', 32, 'M', 2000);

select * from funcionarios

-- INSERINDO MAIS FUNCIONÁRIOS
INSERT INTO FUNCIONARIOS (ID, NOME, IDADE, SEXO, SALARIO)
VALUES (2, 'Maria', 35, 'F', 3000);

INSERT INTO FUNCIONARIOS (ID, NOME, IDADE, SEXO, SALARIO)
VALUES (3, 'Norma', 35, 'F', 5000);


